name: CI Build Fix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONUNBUFFERED: 1
  PYTHONIOENCODING: UTF-8
  SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"

jobs:
  fix-python-builds:
    name: Fix Python ${{ matrix.python-version }} Builds
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools build twine
          python -m pip install pytest pytest-cov pytest-mock pytest-asyncio
      
      - name: Run Package Structure Fix Script
        run: |
          # Führe die Paketstruktur-Reparatur aus
          python .github/workflows/fix_package_structure.py
          
          # Stelle sicher, dass wichtige Dateien vorhanden sind
          mkdir -p swissairdry/db
          mkdir -p swissairdry/mqtt
          mkdir -p swissairdry/nextcloud
          mkdir -p swissairdry/integration/deck
          
          # Prüfe die Paketstruktur
          find swissairdry -type d | sort
          find swissairdry -name "__init__.py" | sort
          ls -la

      - name: Fix MQTT Client Issues
        run: |
          # Prüfe und repariere MQTT-Client-Datei
          if [ -f "swissairdry/api/mqtt_client.py" ]; then
            echo "Fixing MQTT client..."
            # Stellen Sie sicher, dass keine Einrückungsprobleme vorhanden sind
            python -m black swissairdry/api/mqtt_client.py
          fi

      - name: Validate Package Configuration
        run: |
          echo "=== pyproject.toml ==="
          cat pyproject.toml
          
          echo "=== setup.py ==="
          cat setup.py
          
          echo "=== MANIFEST.in ==="
          cat MANIFEST.in
      
      - name: Build Package
        run: |
          # Baue ein Source-Distribution und Wheel
          python -m build --sdist --wheel

      - name: Verify Package
        run: |
          # Überprüfe das erstellte Paket mit twine
          python -m twine check dist/*
      
      - name: Test Installation
        run: |
          # Versuche, das erstellte Paket zu installieren
          pip install dist/*.whl
          
          # Überprüfe, ob das Paket ordnungsgemäß installiert wurde
          python -c "import swissairdry; print(f'SwissAirDry Version: {getattr(swissairdry, \"__version__\", \"Unknown\")}')"
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ matrix.python-version }}-package
          path: |
            dist/*.tar.gz
            dist/*.whl