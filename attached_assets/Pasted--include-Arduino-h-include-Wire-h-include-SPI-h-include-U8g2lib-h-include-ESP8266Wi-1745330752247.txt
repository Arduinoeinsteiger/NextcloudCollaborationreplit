#include <Arduino.h>
#include <Wire.h>
#include <SPI.h>
#include <U8g2lib.h>
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>

// Pin-Definitionen
#define BUTTON_UP D5
#define BUTTON_MID D6
#define BUTTON_DOWN D7
#define SENSOR_PIN D0
#define MOTOR_PIN D3

// Display-Konfiguration fuer 1.5" 128x128 OLED mit SH1107
U8G2_SH1107_SEEED_128X128_F_HW_I2C display(U8G2_R0);  // Rotation 0, normale Ausrichtung

// Konstanten fuer Leitungsentlueftung und Drucksensor
const unsigned long MAX_PURGE_TIME = 15000;            // Maximale Zeit fuer Entlueftung: 15 Sekunden
const int PRESSURE_STABLE_THRESHOLD = 5;               // Schwellenwert fuer stabile Druckwerte
const unsigned long PRESSURE_CHECK_INTERVAL = 100;     // Pruefung alle 100ms
const unsigned long PRESSURE_VERIFY_TIME = 3000;       // 3 Sekunden Verifikationszeit

// Icon-Definitionen
static const uint8_t image_network_not_connected_bits[] = {0x41,0x70,0x22,0x50,0x14,0x50,0x08,0x50,0x14,0x57,0x22,0x55,0x41,0x55,0x00,0x55,0x70,0x55,0x50,0x55,0x50,0x55,0x50,0x55,0x57,0x55,0x55,0x55,0x77,0x77,0x00,0x00};
static const uint8_t image_network_1_bits[] = {0x00,0x70,0x00,0x50,0x00,0x50,0x00,0x50,0x00,0x57,0x00,0x55,0x00,0x55,0x00,0x55,0x70,0x55,0x50,0x55,0x50,0x55,0x50,0x55,0x57,0x55,0x55,0x55,0x77,0x77,0x00,0x00};
static const uint8_t image_network_1_bar_bits[] = {0x00,0x70,0x00,0x50,0x00,0x50,0x00,0x50,0x00,0x57,0x00,0x55,0x00,0x55,0x00,0x55,0x70,0x55,0x50,0x55,0x50,0x55,0x50,0x55,0x57,0x55,0x57,0x55,0x77,0x77,0x00,0x00};
static const uint8_t image_network_2_bars_bits[] = {0x00,0x70,0x00,0x50,0x00,0x50,0x00,0x50,0x00,0x57,0x00,0x55,0x00,0x55,0x00,0x55,0x70,0x55,0x70,0x55,0x70,0x55,0x70,0x55,0x77,0x55,0x77,0x55,0x77,0x77,0x00,0x00};
static const uint8_t image_network_3_bars_bits[] = {0x00,0x70,0x00,0x50,0x00,0x50,0x00,0x50,0x00,0x57,0x00,0x57,0x00,0x57,0x00,0x57,0x70,0x57,0x70,0x57,0x70,0x57,0x70,0x57,0x77,0x57,0x77,0x57,0x77,0x77,0x00,0x00};
static const uint8_t image_network_4_bars_bits[] = {0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x77,0x00,0x77,0x00,0x77,0x00,0x77,0x70,0x77,0x70,0x77,0x70,0x77,0x70,0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x00,0x00};
static const uint8_t image_cloud_sync_bits[] = {0x00,0x00,0x00,0xe0,0x03,0x00,0x10,0x04,0x00,0x08,0x08,0x00,0x0c,0x10,0x00,0x02,0x70,0x00,0x01,0x80,0x00,0x41,0x04,0x01,0xe2,0x04,0x01,0xf4,0xf5,0x00,0x40,0x04,0x00,0x40,0x1f,0x00,0x40,0x0e,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
static const uint8_t image_check_contour_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x0a,0x04,0x11,0x8a,0x08,0x51,0x04,0x22,0x02,0x04,0x01,0x88,0x00,0x50,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
static const uint8_t image_cross_contour_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x01,0x8a,0x02,0x51,0x04,0x22,0x02,0x04,0x01,0x88,0x00,0x04,0x01,0x22,0x02,0x51,0x04,0x8a,0x02,0x04,0x01,0x00,0x00,0x00,0x00};
static const uint8_t image_MFKey_qr_bits[] = {0x7f,0x57,0xfc,0x01,0x41,0x09,0x05,0x01,0x5d,0x61,0x74,0x01,0x5d,0xec,0x75,0x01,0x5d,0x7f,0x74,0x01,0x41,0x64,0x05,0x01,0x7f,0x55,0xfd,0x01,0x00,0x2c,0x00,0x00,0xf9,0xd1,0xd2,0x01,0x3d,0xf6,0xf8,0x00,0x73,0x82,0x20,0x01,0x01,0x4d,0xef,0x01,0xc8,0x92,0x0c,0x01,0x3b,0xf1,0x93,0x00,0xc7,0xd2,0xf4,0x01,0xbd,0x5b,0x6d,0x01,0xd1,0xaf,0xdf,0x00,0x00,0x37,0xd1,0x00,0x7f,0x4d,0x15,0x01,0x41,0xbf,0x11,0x00,0x5d,0xc1,0x1f,0x00,0x5d,0x5b,0x86,0x01,0x5d,0x0e,0xf1,0x01,0x41,0x5e,0xde,0x01,0x7f,0x87,0x23,0x01};
static const uint8_t image_hourglass4_bits[] = {0x00,0x02,0x00,0x00,0x07,0x00,0x80,0x02,0x00,0x40,0x05,0x00,0xa0,0x08,0x00,0x50,0x10,0x00,0x28,0x10,0x00,0x14,0x10,0x00,0x0a,0x10,0x00,0x07,0x10,0x00,0x0a,0x10,0x00,0x10,0xe0,0x07,0xe0,0x07,0x08,0x00,0x28,0x50,0x00,0xe8,0xe7,0x00,0xe8,0x53,0x00,0xe8,0x29,0x00,0xe8,0x14,0x00,0x48,0x0a,0x00,0x10,0x05,0x00,0xa0,0x02,0x00,0x40,0x01,0x00,0xe0,0x00,0x00,0x40,0x00};
static const uint8_t image_hourglass5_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x60,0x0a,0x00,0x50,0xfa,0x00,0x5f,0x0a,0x81,0x50,0x0a,0x42,0x50,0x0a,0x24,0x50,0x0a,0x18,0x5e,0x0a,0xc0,0x5f,0x0a,0x98,0x5f,0x0a,0x24,0x5f,0x0a,0x42,0x5e,0x0a,0x81,0x50,0xfa,0x00,0x5f,0x0a,0x00,0x50,0x06,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
static const uint8_t image_hourglass6_bits[] = {0x00,0x40,0x00,0x00,0xe0,0x00,0x00,0x40,0x01,0x00,0xa0,0x02,0x00,0x10,0x05,0x00,0x08,0x0a,0x00,0x08,0x14,0x00,0xc8,0x29,0x00,0xe8,0x53,0x00,0xe8,0xe7,0x00,0xe8,0x53,0xe0,0x07,0x08,0x10,0xe0,0x07,0x0a,0x10,0x00,0x07,0x10,0x00,0x0a,0x10,0x00,0x14,0x10,0x00,0x28,0x10,0x00,0x50,0x10,0x00,0xa0,0x08,0x00,0x40,0x05,0x00,0x80,0x02,0x00,0x00,0x07,0x00,0x00,0x02,0x00};
static const uint8_t image_hourglass2_bits[] = {0x00,0x00,0x00,0xe0,0xff,0x0f,0x20,0x00,0x08,0xc0,0xff,0x07,0x80,0x00,0x02,0x80,0x00,0x02,0x80,0x00,0x02,0x80,0x7c,0x02,0x00,0x39,0x01,0x00,0x92,0x00,0x00,0x44,0x00,0x00,0x28,0x00,0x00,0x28,0x00,0x00,0x44,0x00,0x00,0x92,0x00,0x00,0x01,0x01,0x80,0x7c,0x02,0x80,0xfe,0x02,0x80,0xfe,0x02,0x80,0x00,0x02,0xc0,0xff,0x07,0x20,0x00,0x08,0xe0,0xff,0x0f,0x00,0x00,0x00};
static const uint8_t image_Dehumidify_bits[] = {0xf8,0xff,0x3f,0x00,0x04,0x00,0x40,0x00,0x02,0x00,0x80,0x00,0x01,0x00,0x00,0x01,0x01,0x00,0x00,0x01,0x01,0x10,0x00,0x01,0x01,0x10,0x00,0x01,0x01,0x18,0x00,0x01,0x01,0x38,0x00,0x01,0x01,0x3c,0x00,0x01,0x01,0x7c,0x00,0x01,0x01,0xfe,0x00,0x01,0x01,0xfe,0x00,0x01,0x01,0xbf,0x01,0x01,0x01,0x7f,0x01,0x01,0x81,0x7f,0x03,0x01,0x81,0xff,0x03,0x01,0x01,0xff,0x01,0x01,0x01,0xff,0x01,0x01,0x01,0xfe,0x00,0x01,0x01,0x78,0x00,0x01,0x01,0x00,0x00,0x01,0x01,0x00,0x00,0x01,0x03,0x00,0x80,0x01,0x06,0x00,0xc0,0x00,0xfc,0xff,0x7f,0x00,0xf8,0xff,0x3f,0x00};

// Startlogo
static const uint8_t image_Layer_3layer_3layer_3layer_3_5_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0xc3,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0xc3,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0xfc,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0xfc,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0xf0,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0xf0,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x01,0x00,0x00,0xfc,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x01,0x00,0x00,0xfc,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0x00,0x00,0xf0,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0x00,0x00,0xf0,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x07,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x07,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x3f,0x00,0x00,0xfe,0x0f,0x3c,0x00,0x00,0xf8,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x3f,0x00,0x00,0xfe,0x0f,0x3c,0x00,0x00,0xf8,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0xfe,0x0f,0x3c,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0xfe,0x0f,0x3c,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xcf,0xff,0x03,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xfe,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0xfe,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0xf8,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0xf8,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x0f,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x0f,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0xfe,0xff,0x0f,0x00,0xe0,0xff,0xff,0xff,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0xfe,0xff,0x0f,0x00,0xe0,0xff,0xff,0xff,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0xf8,0xff,0xff,0xff,0x03,0x00,0xfe,0xff,0xff,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0xf8,0xff,0xff,0xff,0x03,0x00,0xfe,0xff,0xff,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0xe0,0xff,0xff,0xff,0xff,0x7f,0x80,0x0f,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x00,0xe0,0xff,0xff,0xff,0xff,0x7f,0x80,0x0f,0x00,0xf0,0xff,0xff,0xff,0xff,0xff,0x07,0x00,0xf8,0xff,0xff,0xff,0x7f,0x80,0x0f,0x00,0xf0,0xff,0xff,0xff,0xff,0xff,0x07,0x00,0xf8,0xff,0xff,0xff,0x7f,0x80,0x0f,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0xff,0xff,0xff,0x07,0x80,0x03,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0xff,0xff,0xff,0x07,0x80,0x03,0x00,0xff,0x00,0x00,0xe0,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xe0,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xf8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0xf8,0x01,0x00,0x00,0x00,0xfe,0xff,0x01,0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0xfc,0xff,0x01,0x3c,0x00,0x00,0xfe,0xff,0xff,0x00,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0x3e,0x00,0x00,0xfe,0xff,0xff,0x00,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0x3e,0x00,0x00,0xfe,0xff,0xff,0x3f,0x00,0xe0,0xff,0xff,0xff,0xff,0xff,0x07,0x80,0x0f,0x00,0x00,0xfe,0xff,0xff,0x3f,0x00,0xe0,0xff,0xff,0xff,0xff,0xff,0x07,0x80,0x0f,0x00,0x00,0x00,0xfe,0xff,0xff,0x03,0x00,0xfe,0xff,0xff,0xff,0xff,0x01,0xe0,0x0f,0x00,0x00,0x00,0xfe,0xff,0xff,0x03,0x00,0xfe,0xff,0xff,0xff,0xff,0x01,0xe0,0x0f,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0x00,0xe0,0xff,0xff,0xff,0x0f,0x00,0xfe,0x03,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0x00,0xe0,0xff,0xff,0xff,0x0f,0x00,0xfe,0x03,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0x1f,0x00,0x00,0x3c,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0x1f,0x00,0x00,0x3c,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0xfe,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0xfe,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0x00,0x00,0xe0,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0x00,0x00,0xe0,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x07,0x00,0xc0,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x07,0x00,0xc0,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00};

// Menuezustaende
enum MenuState {
    SPLASH_SCREEN,     // Neuer Zustand für das Startlogo
    START_SCREEN,
    MAIN_MENU,
    SETUP_14_DAYS_CONFIRM,
    SETUP_21_DAYS_CONFIRM,
    SETUP_30_DAYS_CONFIRM,
    SETUP_60_DAYS_CONFIRM,
    SETUP_90_DAYS_CONFIRM,
    SETUP_CUSTOM_DAYS_CONFIRM,
    CUSTOM_DAYS_INPUT,
    LINE_PURGING,
    PRESSURE_VERIFICATION,
    INITIAL_SPRAY_TEST,
    PROGRAM_RUNNING,
    ERROR_TANK_LOW,
    COUNTDOWN_SCREEN
};

// Globale Variablen
MenuState currentState = SPLASH_SCREEN;  // Start mit dem Splash-Screen
unsigned long splashStartTime = 0;       // Zeit für den Splash-Screen
const unsigned long SPLASH_DURATION = 3000; // Splash-Screen Dauer in ms

// Globale Variablen für die Sanduhr-Animation
static uint8_t hourglassFrame = 0;
static const uint8_t* const hourglassFrames[] = {
    image_hourglass2_bits,
    image_hourglass4_bits,
    image_hourglass5_bits,
    image_hourglass6_bits
};

// Funktionsprototypen
void handleButtons();
void updateDisplay();
void handleMenu();
void checkPressure();
void runMotor(bool state);

// Implementierung der Funktionen
void handleButtons() {
    // Implementierung folgt
    // Hier werden die Tastenzustände ausgelesen und verarbeitet
}

void updateDisplay() {
    display.clearBuffer();
    display.setBitmapMode(1);
    display.setFontMode(1);
    
    switch(currentState) {
        case SPLASH_SCREEN:
            // Logo bei Position (0,0) anzeigen
            display.drawXBM(0, 0, 122, 114, image_Layer_3layer_3layer_3layer_3_5_bits);
            
            // Prüfe, ob die Splash-Screen-Zeit abgelaufen ist
            if (millis() - splashStartTime >= SPLASH_DURATION) {
                currentState = START_SCREEN;
            }
            break;
            
        case START_SCREEN:
            // Titel
            display.setFont(u8g2_font_8x13B_tf);
            display.drawStr(10, 64, "Desinfektions");
            display.drawStr(30, 80, "Einheit");
            
            // Status-Icons
            display.drawXBM(0, 0, 15, 16, image_network_not_connected_bits);  // Netzwerk-Status
            display.drawXBM(97, 0, 17, 16, image_cloud_sync_bits);           // Sync-Status
            break;
            
        case MAIN_MENU:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Hauptmenue");
            display.drawXBM(1, 20, 11, 16, image_cross_contour_bits);        // Kreuz-Symbol
            display.drawXBM(17, 20, 13, 16, image_check_contour_bits);       // Haken-Symbol
            break;
            
        case LINE_PURGING:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Leitungsentlueftung");
            display.drawXBM(33, 73, 25, 27, image_Dehumidify_bits);         // Entlüftungs-Symbol
            break;
            
        case COUNTDOWN_SCREEN:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Countdown");
            // Sanduhr-Animation
            display.drawXBM(52, 30, 24, 24, hourglassFrames[hourglassFrame]);
            hourglassFrame = (hourglassFrame + 1) % 4;
            break;

        case SETUP_14_DAYS_CONFIRM:
        case SETUP_21_DAYS_CONFIRM:
        case SETUP_30_DAYS_CONFIRM:
        case SETUP_60_DAYS_CONFIRM:
        case SETUP_90_DAYS_CONFIRM:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Tage bestaetigen");
            display.drawXBM(52, 30, 24, 24, image_check_contour_bits);
            break;

        case SETUP_CUSTOM_DAYS_CONFIRM:
        case CUSTOM_DAYS_INPUT:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Tage eingeben");
            break;

        case PRESSURE_VERIFICATION:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Druckpruefung");
            break;

        case INITIAL_SPRAY_TEST:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Spruehtest");
            break;

        case PROGRAM_RUNNING:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Programm laeuft");
            break;

        case ERROR_TANK_LOW:
            display.setFont(u8g2_font_6x10_tf);
            display.drawStr(5, 10, "Tank leer!");
            display.drawXBM(52, 30, 11, 16, image_cross_contour_bits);
            break;
            
        default:
            break;
    }
    
    display.sendBuffer();
}

void handleMenu() {
    // Implementierung folgt
    // Hier wird die Menulogik implementiert
}

void checkPressure() {
    // Implementierung folgt
    // Hier wird der Drucksensor ausgelesen und verarbeitet
}

void runMotor(bool state) {
    digitalWrite(MOTOR_PIN, state);
}

void setup() {
    Serial.begin(115200);
    
    // Pin-Konfiguration
    pinMode(BUTTON_UP, INPUT_PULLUP);
    pinMode(BUTTON_MID, INPUT_PULLUP);
    pinMode(BUTTON_DOWN, INPUT_PULLUP);
    pinMode(SENSOR_PIN, INPUT_PULLUP);
    pinMode(MOTOR_PIN, OUTPUT);
    
    digitalWrite(SENSOR_PIN, LOW);  // Sensor aktivieren
    digitalWrite(MOTOR_PIN, LOW);    // Motor initial ausschalten
    
    // Initialisiere die Splash-Screen-Zeit
    splashStartTime = millis();
    
    // Display initialisieren
    display.begin();
    display.clearBuffer();
    display.setFont(u8g2_font_6x10_tf);
    display.sendBuffer();

    Serial.println("System gestartet");
}

void loop() {
    handleButtons();    // Tastenabfrage
    handleMenu();       // Menueverarbeitung
    updateDisplay();    // Display aktualisieren
    checkPressure();    // Drucksensor pruefen
} 