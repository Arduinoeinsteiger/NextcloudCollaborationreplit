; PlatformIO Projekt-Konfiguration
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = esp32c6

; Gemeinsame Einstellungen für alle Umgebungen
[env]
framework = arduino
monitor_speed = 115200
lib_deps =
    https://github.com/bblanchon/ArduinoJson.git
    https://github.com/tzapu/WiFiManager.git
    https://github.com/mathertel/OneButton.git

; ESP32-C6 XIAO mit TFT-Display und SD-Karte
[env:esp32c6]
platform = https://github.com/platformio/platform-espressif32.git
platform_packages = 
    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#master
board = esp32-c6-devkitm-1
board_build.mcu = esp32c6
board_build.f_cpu = 160000000L
board_build.f_flash = 80000000L
board_build.flash_mode = qio
board_upload.flash_size = 4MB
; Verwende USB als Upload-Methode
upload_protocol = esptool
upload_port = /dev/ttyUSB0  ; Anpassen an den tatsächlichen Port
upload_speed = 921600
; Board-Flags und Definitionen
build_flags = 
    -D ESP32
    -D ESP32C6
    -D TFT_DISPLAY
    -D SD_CARD
    -D ARDUINO_USB_MODE=1
    -D ARDUINO_USB_CDC_ON_BOOT=1
    -D ARDUINO_FIRMWARE_VERSION="1.0.0"
    -D CONFIG_SPIRAM_CACHE_WORKAROUND
    -DBOARD_HAS_PSRAM
    -DLV_LVGL_H_INCLUDE_SIMPLE
    -DSPI_HOST_DEVICE_VSPI=2  ; Wichtig für ESP32-C6 SPI-Kompatibilität
    -DSPI_HOST_DEVICE_HSPI=1  ; Wichtig für ESP32-C6 SPI-Kompatibilität
    ; TFT eSPI Konfiguration
    -DUSER_SETUP_LOADED=1
    -DST7789_DRIVER=1
    -DTFT_WIDTH=172
    -DTFT_HEIGHT=320
    -DTFT_MISO=9
    -DTFT_MOSI=10
    -DTFT_SCLK=8
    -DTFT_CS=3
    -DTFT_DC=4
    -DTFT_RST=5
    -DTFT_BL=6
    -DTFT_BACKLIGHT_ON=HIGH
    -DSPI_FREQUENCY=40000000
    -DSPI_READ_FREQUENCY=20000000
    -DSPI_TOUCH_FREQUENCY=2500000
    ; SD-Karten-Konfiguration
    -DSD_CS=7
lib_deps = 
    ${env.lib_deps}
    https://github.com/Bodmer/TFT_eSPI.git
    https://github.com/me-no-dev/AsyncTCP.git
    https://github.com/me-no-dev/ESPAsyncWebServer.git
    https://github.com/madhephaestus/ESP32AnalogRead.git
    https://github.com/h2zero/NimBLE-Arduino.git  ; NimBLE ist kompatibler mit ESP32-C6
    https://github.com/arduino-libraries/SD.git
    https://github.com/lorol/LITTLEFS.git
board_build.partitions = huge_app.csv

; ESP32-C6 DevKitM-1 (Alternative Konfiguration für offizielles Espressif DevKit)
[env:esp32c6-devkit]
platform = https://github.com/platformio/platform-espressif32.git
platform_packages = 
    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#master
board = esp32-c6-devkitm-1
board_build.mcu = esp32c6
board_build.f_cpu = 160000000L
upload_protocol = esptool
build_flags = 
    -D ESP32
    -D ESP32C6
    -D CONFIG_SPIRAM_CACHE_WORKAROUND
    -DBOARD_HAS_PSRAM
    -DSPI_HOST_DEVICE_VSPI=2  ; Wichtig für ESP32-C6 SPI-Kompatibilität
    -DSPI_HOST_DEVICE_HSPI=1  ; Wichtig für ESP32-C6 SPI-Kompatibilität
lib_deps = 
    ${env.lib_deps}
    https://github.com/me-no-dev/AsyncTCP.git
    https://github.com/me-no-dev/ESPAsyncWebServer.git
    https://github.com/h2zero/NimBLE-Arduino.git
board_build.partitions = huge_app.csv

; ESP8266 mit Membranschalter
[env:esp8266]
platform = espressif8266
board = d1_mini
build_flags = 
    -D ESP8266
    -D MEMBRANE_BUTTONS
lib_deps = 
    ${env.lib_deps}
    https://github.com/esp8266/Arduino.git#libraries/ESP8266WebServer
    https://github.com/esp8266/Arduino.git#libraries/ESP8266HTTPClient
    https://github.com/esp8266/Arduino.git#libraries/ESP8266WiFi
    https://github.com/esp8266/Arduino.git#libraries/ESP8266mDNS

; Hinweis: 
; Um die Firmware für ESP8266 zu kompilieren:
; pio run -e esp8266
;
; Um die Firmware für ESP32-C6 zu kompilieren:
; pio run -e esp32c6
;
; Um die Firmware hochzuladen (ESP8266):
; pio run -e esp8266 -t upload
;
; Um die Firmware hochzuladen (ESP32-C6):
; pio run -e esp32c6 -t upload
;
; Um die serielle Konsole zu öffnen:
; pio device monitor